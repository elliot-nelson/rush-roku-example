{"version":3,"file":"plugin.js","sourceRoot":"../src/","sources":["plugin.ts"],"names":[],"mappings":";;;AAeA,MAAa,aAAa;IAA1B;QACW,SAAI,GAAG,eAAe,CAAC;QAuI9B;;;;;;;;;;;;;;UAcE;IACN,CAAC;IAjJG,+BAA+B;IAE/B,mBAAmB,CAAC,OAAuB;QACvC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;QAE5C,uEAAuE;QAEvE;;;;;;UAME;IACN,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4BE;IAEF,kBAAkB,CAAC,OAAgB;QAC/B,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QAC3C,8CAA8C;IAClD,CAAC;IAED,cAAc,CAAC,IAAa;QACxB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAEjC,OAAO;QAEP;;;;;;;;;;;;;;;;;;UAkBE;IACN,CAAC;IAED,aAAa,KAAK,CAAC;IAEnB,sBAAsB,CAAC,OAAgB,EAAE,OAAuB,EAAE,MAAiB;QAC/E,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC5B,6CAA6C;QAC7C,qCAAqC;IACzC,CAAC;IAED,mBAAmB,CAAC,KAA+B;QAC/C,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC1B;;;;;;;;;;;;;;;;;;;;UAoBE;IACN,CAAC;IAED,qBAAqB,CAAC,OAAgB,EAAE,OAAuB,EAAE,MAAiB;QAC9E,mCAAmC;IACvC,CAAC;IAED,oBAAoB;QAChB,sBAAsB;QACtB;;;;;;;;;UASE;IACN,CAAC;CAiBJ;AAvJD,sCAuJC;AAED,kBAAe,GAAG,EAAE;IAChB,OAAO,IAAI,aAAa,EAAE,CAAC;AAC/B,CAAC,CAAC","sourcesContent":["import type {\n    BscFile,\n    CompilerPlugin,\n    Program,\n    ProgramBuilder,\n    TranspileObj,\n    AstEditor,\n    BeforeFileTranspileEvent,\n    PluginHandler\n} from 'brighterscript';\nimport {\n    isBrsFile\n} from 'brighterscript';\nimport * as minimatch from 'minimatch';\n\nexport class ExamplePlugin implements CompilerPlugin {\n    public name = 'examplePlugin';\n    //public session: RooibosSession;\n    //public codeCoverageProcessor: CodeCoverageProcessor;\n    //public fileFactory: FileFactory;\n    public _builder: ProgramBuilder;\n    //public config: RooibosConfig;\n\n    beforeProgramCreate(builder: ProgramBuilder): void {\n        this._builder = builder;\n\n        console.log('beforeProgramCreate', builder);\n\n        //this.config = this.getConfig((builder.options as any).rooibos || {});\n\n        /*\n        this.fileFactory = new FileFactory(this.config);\n        if (!this.session) {\n            this.session = new RooibosSession(builder, this.fileFactory);\n            this.codeCoverageProcessor = new CodeCoverageProcessor(builder);\n        }\n        */\n    }\n\n    /*\n    private getConfig(options: any) {\n        let config: RooibosConfig = options;\n        if (config.printTestTimes === undefined) {\n            config.printTestTimes = true;\n        }\n        if (config.catchCrashes === undefined) {\n            config.catchCrashes = true;\n        }\n        if (config.sendHomeOnFinish === undefined) {\n            config.sendHomeOnFinish = true;\n        }\n        if (config.failFast === undefined) {\n            config.failFast = true;\n        }\n        if (config.showOnlyFailures === undefined) {\n            config.showOnlyFailures = true;\n        }\n        if (config.isRecordingCodeCoverage === undefined) {\n            config.isRecordingCodeCoverage = true;\n        }\n        //ignore roku modules by default\n        if (config.includeFilters === undefined) {\n            config.includeFilters = []\n        }\n\n        return config;\n    }\n    */\n\n    afterProgramCreate(program: Program) {\n        console.log('afterProgramCreate', program);\n        //this.fileFactory.addFrameworkFiles(program);\n    }\n\n    afterFileParse(file: BscFile): void {\n        console.log('afp', file.pkgPath);\n\n        return;\n\n        /*\n        if (file.pathAbsolute.includes('/rooibos/bsc-plugin/dist/framework')) {\n            // eslint-disable-next-line @typescript-eslint/dot-notation\n            file['diagnostics'] = [];\n            return;\n        }\n        if (this.fileFactory.isIgnoredFile(file) || !this.shouldSearchInFileForTests(file)) {\n            return;\n        }\n\n        // console.log('processing ', file.pkgPath);\n        if (isBrsFile(file)) {\n            if (this.session.processFile(file)) {\n                //\n            } else {\n                this.codeCoverageProcessor.addCodeCoverage(file);\n            }\n        }\n        */\n    }\n\n    beforePublish() { }\n\n    beforeProgramTranspile(program: Program, entries: TranspileObj[], editor: AstEditor) {\n        console.log('bpt', program);\n        //this.session.addTestRunnerMetadata(editor);\n        //this.session.addLaunchHook(editor);\n    }\n\n    beforeFileTranspile(event: BeforeFileTranspileEvent) {\n        console.log('bft', event);\n        /*\n        let testSuite = this.session.sessionInfo.testSuitesToRun.find((ts) => ts.file.pkgPath === event.file.pkgPath);\n        if (testSuite) {\n            let noEarlyExit = testSuite.annotation.noEarlyExit;\n            if (noEarlyExit) {\n                console.warn(`WARNING: testSuite \"${testSuite.name}\" is marked as noEarlyExit`);\n            }\n\n            testSuite.addDataFunctions(event.editor as any);\n            for (let group of [...testSuite.testGroups.values()].filter((tg) => tg.isIncluded)) {\n                for (let testCase of [...group.testCases.values()].filter((tc) => tc.isIncluded)) {\n                    group.modifyAssertions(testCase, noEarlyExit, event.editor as any);\n                }\n            }\n            if (testSuite.isNodeTest) {\n                this.session.createNodeFile(event.program, testSuite);\n            }\n        }\n\n        this.session.createNodeFiles(this._builder.program);\n        */\n    }\n\n    afterProgramTranspile(program: Program, entries: TranspileObj[], editor: AstEditor) {\n        //this.session.removeRooibosMain();\n    }\n\n    afterProgramValidate() {\n        // console.log('bpv');\n        /*\n        this.session.updateSessionStats();\n        for (let testSuite of [...this.session.sessionInfo.testSuites.values()]) {\n            testSuite.validate();\n        }\n        for (let file of this.fileFactory.addedFrameworkFiles) {\n            // eslint-disable-next-line @typescript-eslint/dot-notation\n            file['diagnostics'] = [];\n        }\n        */\n    }\n\n    /*\n    shouldSearchInFileForTests(file: BscFile) {\n        if (!this.config.includeFilters || this.config.includeFilters.length === 0) {\n            return true;\n        } else {\n            for (let filter of this.config.includeFilters) {\n                if (!minimatch(file.pathAbsolute, filter)) {\n                    return false;\n                }\n            }\n        }\n        // console.log('including ', file.pkgPath);\n        return true;\n    }\n    */\n}\n\nexport default () => {\n    return new ExamplePlugin();\n};\n"]}